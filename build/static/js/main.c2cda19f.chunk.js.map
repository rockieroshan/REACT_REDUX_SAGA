{"version":3,"sources":["components/State/WeatherForecast/Actions/Actions.tsx","assets/Spinner.gif","components/Loader/Loader.tsx","components/State/WeatherForecast/ActionTypes/ActionTypes.tsx","App.tsx","serviceWorker.ts","components/State/WeatherForecast/Reducer/Reducer.tsx","components/State/WeatherForecast/Service/Api.tsx","components/State/Sagas/Sagas.tsx","components/State/store.tsx","index.tsx"],"names":["fetchWeatherRequest","payload","action","WeatherActionTypes","FETCH_REQUEST","fetchWeatherSuccess","data","FETCH_SUCCESS","fetchWeatherError","message","FETCH_ERROR","module","exports","Loader","className","src","Spinner","alt","Container","React","lazy","App","fallback","Boolean","window","location","hostname","match","initialState","undefined","error","loading","getWeatherByCityName","city","axios","method","baseURL","url","params","APPID","process","q","units","cnt","then","resp","fetchWeatherSaga","watchWeatherSaga","call","response","put","takeEvery","actionTypes","rootSaga","sagaMiddleware","createSagaMiddleware","all","rootReducer","combineReducers","weather","state","type","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"+HAAA,yHAKaA,EAAsB,SAACC,GAAD,OACjCC,iBAAOC,IAAmBC,cAAeH,IAE9BI,EAAsB,SAACC,GAAD,OACjCJ,iBAAOC,IAAmBI,cAAeD,IAE9BE,EAAoB,SAACC,GAAD,OAC/BP,iBAAOC,IAAmBO,YAAaD,K,mBCZzCE,EAAOC,QAAU,IAA0B,qC,gCCA3C,6CAYeC,IARW,WACxB,OACE,yBAAKC,UAAU,UACb,yBAAKC,IAAKC,IAASC,IAAKD,S,kICPvB,IAAKb,EAAZ,kC,SAAYA,K,wCAAAA,E,wCAAAA,E,qCAAAA,M,wGCINe,EAAYC,IAAMC,MAAK,kBAAM,gCAYpBC,EAVQ,WACrB,OACE,yBAAKP,UAAU,OACb,kBAAC,WAAD,CAAUQ,SAAU,kBAACT,EAAA,EAAD,OAClB,kBAACK,EAAD,SCEYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0ECdOC,EAA6B,CACxCtB,UAAMuB,EACNC,WAAOD,EACPE,SAAS,G,yBCFEC,EAAuB,SAACC,GAAD,OAClCC,IAAM,CACJC,OAAQ,MACRC,QANY,0CAOZC,IAAK,WACLC,OAAQ,CACNC,MARUC,mCASVC,EAAGR,EACHS,MAAO,SACPC,IAAK,OAGNC,MAAK,qBAAGtC,QACRsC,MAAK,SAACC,GAAD,OAAUA,M,WCJHC,G,WASAC,GATV,SAAUD,EAAiB5C,GAA3B,uEAEc,OAFd,kBAEoB8C,YAAKhB,EAAsB9B,EAAOD,SAFtD,OAGH,OADMgD,EAFH,gBAGGC,YAAI7C,YAAoB4C,IAH3B,8BAKH,OALG,mCAKGC,YAAI1C,YAAkB,KAAMyC,SAAS3C,KAAKG,UAL7C,qDASA,SAAUsC,IAAV,iEACL,OADK,SACCI,YACJC,IAA+BhD,cAC/B0C,GAHG,uCAOQC,Q,WCpBLM,GAFJC,EAAiBC,cAEvB,SAAUF,IAAV,iEACE,OADF,SACQG,YAAI,CAACT,MADb,uCAIA,IAAMU,EAAcC,0BAAgB,CAClCC,QHLqC,WAAmC,IAAlCC,EAAiC,uDAAzBhC,EAAc1B,EAAW,uCACvE,OAAQA,EAAO2D,MACb,KAAK1D,IAAmBC,cACtB,OAAO,2BAAKwD,GAAZ,IAAmB7B,SAAS,IAE9B,KAAK5B,IAAmBI,cACtB,OAAO,2BAAKqD,GAAZ,IAAmB7B,SAAS,EAAOzB,KAAMJ,EAAOD,UAElD,KAAKE,IAAmBO,YACtB,OAAO,2BAAKkD,GAAZ,IAAmB7B,SAAS,EAAOD,MAAO5B,EAAOD,UAEnD,QACE,OAAO2D,MGJPE,EAAQC,sBACZN,EACAO,8BAAoBC,0BAAgBX,KAGtCA,EAAeY,IAAIb,GAEJS,QChBfK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,QAGJQ,SAASC,eAAe,SL4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACLgD,QAAQhD,MAAMA,EAAMrB,c","file":"static/js/main.c2cda19f.chunk.js","sourcesContent":["import { action } from 'typesafe-actions';\n\nimport { WeatherActionTypes } from '../ActionTypes/ActionTypes';\nimport { Weather } from '../Types';\n\nexport const fetchWeatherRequest = (payload: string) =>\n  action(WeatherActionTypes.FETCH_REQUEST, payload);\n\nexport const fetchWeatherSuccess = (data: Weather) =>\n  action(WeatherActionTypes.FETCH_SUCCESS, data);\n\nexport const fetchWeatherError = (message: string) =>\n  action(WeatherActionTypes.FETCH_ERROR, message);\n","module.exports = __webpack_public_path__ + \"static/media/Spinner.44271f65.gif\";","import React from 'react';\nimport './Loader.scss';\nimport Spinner from '../../assets/Spinner.gif';\n\nconst Loader: React.SFC = () => {\n  return (\n    <div className=\"Loader\">\n      <img src={Spinner} alt={Spinner} />\n    </div>\n  );\n};\n\nexport default Loader;\n","export enum WeatherActionTypes {\n  FETCH_REQUEST = '@@weather/FETCH_REQUEST',\n  FETCH_SUCCESS = '@@weather/FETCH_SUCCESS',\n  FETCH_ERROR = '@@weather/FETCH_ERROR',\n}\n","import React, { Suspense } from 'react';\nimport './App.scss';\nimport Loader from './components/Loader/Loader';\n\nconst Container = React.lazy(() => import('./components/Container/Container'));\n\nconst App: React.SFC = () => {\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<Loader />}>\n        <Container />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Reducer } from 'redux';\nimport { WeatherActionTypes } from '../ActionTypes/ActionTypes';\nimport { WeatherState } from '../Types';\n\nexport const initialState: WeatherState = {\n  data: undefined,\n  error: undefined,\n  loading: false,\n};\n\nconst reducer: Reducer<WeatherState> = (state = initialState, action) => {\n  switch (action.type) {\n    case WeatherActionTypes.FETCH_REQUEST: {\n      return { ...state, loading: true };\n    }\n    case WeatherActionTypes.FETCH_SUCCESS: {\n      return { ...state, loading: false, data: action.payload };\n    }\n    case WeatherActionTypes.FETCH_ERROR: {\n      return { ...state, loading: false, error: action.payload };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport { reducer as weatherReducer };\n","import axios from 'axios';\n\nconst API_URL = 'https://api.openweathermap.org/data/2.5';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nexport const getWeatherByCityName = (city: string) =>\n  axios({\n    method: 'get',\n    baseURL: API_URL,\n    url: 'forecast',\n    params: {\n      APPID: API_KEY,\n      q: city,\n      units: 'metric',\n      cnt: '5',\n    },\n  })\n    .then(({ data }) => data)\n    .then((resp) => resp);\n\nexport default {\n  getWeatherByCityName,\n};\n","import { put, call, takeEvery } from 'redux-saga/effects';\n\nimport * as actionTypes from '../WeatherForecast/ActionTypes/ActionTypes';\nimport {\n  fetchWeatherSuccess,\n  fetchWeatherError,\n} from '../WeatherForecast/Actions/Actions';\nimport { getWeatherByCityName } from '../WeatherForecast/Service/Api';\n\nexport interface GetWeatherAction {\n  type: typeof actionTypes.WeatherActionTypes.FETCH_REQUEST;\n  payload: string;\n}\n\nexport function* fetchWeatherSaga(action: GetWeatherAction) {\n  try {\n    const response = yield call(getWeatherByCityName, action.payload);\n    yield put(fetchWeatherSuccess(response));\n  } catch (error) {\n    yield put(fetchWeatherError(error.response.data.message));\n  }\n}\n\nexport function* watchWeatherSaga() {\n  yield takeEvery(\n    actionTypes.WeatherActionTypes.FETCH_REQUEST,\n    fetchWeatherSaga\n  );\n}\n\nexport default watchWeatherSaga;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { all } from 'redux-saga/effects';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { weatherReducer } from './WeatherForecast/Reducer/Reducer';\nimport watchWeatherSaga from './Sagas/Sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nfunction* rootSaga() {\n  yield all([watchWeatherSaga()]);\n}\n\nconst rootReducer = combineReducers({\n  weather: weatherReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './components/State/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}